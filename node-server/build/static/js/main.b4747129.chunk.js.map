{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","notesToShow","filter","map","find","changedNote","returnedNoted","catch","error","setTimeout","n","toggleInportanceOf","onSubmit","event","preventDefault","target","noteObject","length","date","Date","toISOString","Math","random","concat","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"kLAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCLpCK,EAAU,aA0BD,EAxBA,WASb,OARgBC,IAAMC,IAAIF,GAQXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAe9B,EAXA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAS9B,EANA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SCf9BK,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAe,MAAXA,EACK,KAEF,qBAAKd,UAAU,QAAf,SAAwBc,KCD3BC,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GAwFSC,EAjFH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,iBAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAsBAC,qBAAU,WACRC,QAAQC,IAAI,UACZC,IAAqB3B,MAAK,SAAC4B,GAAD,OAAkBX,EAASW,QACpD,IAEH,IAmBMC,EAAcT,EAChBJ,EACAA,EAAMc,QAAO,SAACxC,GAAD,OAA6B,IAAnBA,EAAKG,aAEhC,OACE,gCACE,uCACA,cAAC,EAAD,CAAce,QAASc,IACvB,8BACE,yBAAQ1B,QAAS,kBAAMyB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGS,EAAYE,KAAI,SAACzC,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBA9DD,SAACc,GAC1B,IAAMf,EAAO0B,EAAMgB,MAAK,SAAC1C,GAAD,OAAUA,EAAKe,KAAOA,KACxC4B,EAAW,2BAAQ3C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDkC,EACUtB,EAAI4B,GACXjC,MAAK,SAACkC,GACLjB,EAASD,EAAMe,KAAI,SAACzC,GAAD,OAAWA,EAAKe,KAAOA,EAAKf,EAAO4C,SAEvDC,OAAM,SAACC,GACNb,EAAgB,SAAD,OACJjC,EAAKK,QADD,uCAGf0C,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMc,QAAO,SAACQ,GAAD,OAAOA,EAAEjC,KAAOA,SA8CVkC,CAAmBjD,EAAKe,MAF3Cf,EAAKe,SAMhB,uBAAMmC,SAzCM,SAACC,GACfA,EAAMC,iBACNjB,QAAQC,IAAI,iBAAkBe,EAAME,QACpC,IAAMC,EAAa,CACjBvC,GAAIW,EAAM6B,OAAS,EACnBlD,QAASuB,EACT4B,MAAM,IAAIC,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,IAE7BvB,EAAmBiB,GAAY5C,MAAK,SAACkC,GACnCjB,EAASD,EAAMmC,OAAOjB,IACtBf,EAAW,QA8BX,UACE,uBAAOiC,MAAOlC,EAASmC,SA3BJ,SAACZ,GACxBtB,EAAWsB,EAAME,OAAOS,UA2BpB,wBAAQE,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MC7FNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b4747129.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\n\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 10000,\n    content: \"This note is not saved to server\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  };\n  // return request.then((response) => response.data.concat(nonExisting));\n  return request.then((response) => response.data);\n  //   return axios.get(baseUrl).then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { getAll, create, update };\n","import React from \"react\";\n\nconst Notification = ({ message }) => {\n  if (message == null) {\n    return null;\n  }\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\nimport Notification from \"./components/Notification\";\n\nconst Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2021\n      </em>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note...\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const toggleInportanceOf = (id) => {\n    const note = notes.find((note) => note.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNoted) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNoted)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server `\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  useEffect(() => {\n    console.log(\"effect\");\n    noteService.getAll().then((initialNotes) => setNotes(initialNotes));\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    console.log(\"button clicked\", event.target);\n    const noteObject = {\n      id: notes.length + 1,\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n    noteService.create(noteObject).then((returnedNoted) => {\n      setNotes(notes.concat(returnedNoted));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleInportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}